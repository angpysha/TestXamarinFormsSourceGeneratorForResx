<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsRoslynComponent>True</IsRoslynComponent>
		<!--<EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>-->
		<Nullable>enable</Nullable>
		<ImplicitUsings>true</ImplicitUsings>
		<LangVersion>Latest</LangVersion>
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
		<DevelopmentDependency>true</DevelopmentDependency>
		<Version>1.0.0</Version>
		<Authors>Andrii Petrovskyi</Authors>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/VocaDB/ResXFileCodeGenerator</PackageProjectUrl>
		<RepositoryUrl>https://github.com/VocaDB/ResXFileCodeGenerator</RepositoryUrl>
		<Description>ResX Designer Source Generator.</Description>
		<NoWarn>$(NoWarn);NU5128;RS1036</NoWarn>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.5.0" PrivateAssets="all" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.5.0" />
	</ItemGroup>


	<!-- This ensures the library will be packaged as a source generator when we use `dotnet pack` -->
	<ItemGroup>
		<None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
	</ItemGroup>

	<ItemGroup>
		<None Include="build\**">
			<Pack>true</Pack>
			<PackagePath>build\</PackagePath>
		</None>
	</ItemGroup>

	<ItemDefinitionGroup>
		<PackageReference>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
	</ItemDefinitionGroup>

	<Import Project="$(MSBuildProjectName).targets" />
</Project>
